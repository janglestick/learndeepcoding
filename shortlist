It's more fun to start with TMUX and some basic SSH
use this simple environment to sure-up the students knowledge and have a tiny bit of fun after TMUX is explored.
Then start by learning and setting up Git and Github and doing an example probject.
Learn the majority of TMUX and it's peripheral issues
Use TMUX to access and use your git files, make sure they can get up to Github
Learn the basics of VIM --  actually do EMACS FIRST
set up your .vimrc, make it part of github
full backup, saved undo, sessions, etc.  corrections for ^w etc
modify your .tmuxconf   for the ESC timeout,  make it part of github

keeping Git organized as a way of keeping your self organized

create a very very basic C program, hello world,  on github
experiment just slightly with controlling IO and redirects, pipes
create a very very basic shell script folder,  on github
use shell to get your basic system info, store your best commands there

comparison and use of pipes / redirects / devices thru C API / unix lib, in comparison to thru the shell
discussion and moderate use of aliases and env
discussion of statelyness

introduce alias, and make an alias for  %l to be ls -lt or whatever the student thinks is useful.    Use alias to change %l   whenever you are going to be using that type of data a lot.   Versatile, changing.
how to check aliases,  how to check env vars and a general start about what they are.
How github can help you with this variability and with distro hopping.
Create a repo with your basic alises,  essentially just . for now
have it run each time.    Have .bashrc  (or .loginrc ?>???? whats more generic than bashrc that will run each time)
so that  %l    is available to you   everywhere you contact github

learn a bit about SSH,   do some setup for SSH certificates
set up in Shell scripts folder
(first deep dive)
look at https://werat.github.io/2017/02/04/tmux-ssh-agent-forwarding.html

discussion of statelyness vs functional 
SWITCH TO EMACS,  learn the basics of Emacs
learn a bit of Lisp in Emacs
(2nd deep dive)
understand what algorithms work well in Lisp and why
write a very rudimentary add-on for Emacs

write CRC in a few forms in a few languages
use CRC for verifying files but also practice using it as a way of practicing for secure encryption
also use if for keeping Hashes ...   deep dive into CRC and writing it efficiently, use it for comparing program speeds

doing CRC in APL and flush it out so that it can read bytes chars words many things,   full maths 

ethic of not using mouse, not using arrow keys, keeping programming control, using console
as a  bravado to encourage learning 'roots/fundamentals'

GO Back to Vim
possily mod your keyboard, set up for touch typing, dont move wrists no mouse no arrows, find a nice easy ESC you like,  (also TAB for shell)
set up a very simple web/javascript learning folder
set up Vim so that it works well with javascript (just follow tuts)
  use VIM in conjunction with Chrome Developer Mode for Javascript
  possibly use Visual Studio briefly with JavaScript

learn how to use   ]   to find Help on things.

learn how to do your own Vim Highlighting in VimL  (2nd deep dive)

keys to undestanding vim : macros that do repeat, commands that dont, in order to be able to move the effect of macros around
VIM look at what is There, not what Prints
VIM uses reverse polish notation
VIM has a set of functions for inside a line, and for outside lines, often you might rearrange a line so your function works on it
you sort of whittle outside in and then also inside out, each as lazily as possible. 

install some APL probably tinyAPL and do some programming in it
APL with VIM?
RobotFrameWork and RIDE,  self-testing IDE.  with Dyalog APL

do some FOrth,  use some interpreter and/or with VIM
